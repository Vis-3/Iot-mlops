networks:
  default:
    driver: bridge  

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.14.0
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_TRACKING_URI=http://localhost:5000
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow_data/mlruns.db 
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=file:/mlflow_data/artifacts 
    volumes:
      - ./mlflow_data:/mlflow_data 
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mlflow_data/mlruns.db
      --artifacts-destination file:/mlflow_data/artifacts
    depends_on:
      - kafka

  trainer:
    build:
      context: ./train
      dockerfile: Dockerfile
    container_name: iot-trainer
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./mlflow_data:/mlflow_data
      - ./data:/app/data
      - ./detect_anomalies:/app/detect_anomalies
    depends_on:
      - mlflow

  anomaly-detector:
    build: ./detect_anomalies 
    container_name: anomaly-detector
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092 
      MLFLOW_TRACKING_URI: http://mlflow:5000 
      MODEL_NAME: AutoGluonIoTAnomalyDetector
      MODEL_ALIAS: production 
    volumes:
      - ./mlflow_data:/mlflow_data
      #- ./latest_model_uri.txt:/app/latest_model_uri.txt
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - mlflow

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus
    depends_on:
      - cadvisor

  grafana:
    image: grafana/grafana:11.6.3
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true

volumes:
  prometheus_data:
  grafana_data:
